/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fdobrotv.elvl.api;

import com.fdobrotv.elvl.model.Elvl;
import com.fdobrotv.elvl.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "elvls", description = "the elvls API")
public interface ElvlsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /elvls : List of all elvls (energy level – лучшая цена по данному инструменту (isin))
     *
     * @return Array of elvls (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "List of all elvls (energy level – лучшая цена по данному инструменту (isin))", nickname = "getAllElvls", notes = "", response = Elvl.class, responseContainer = "List", tags={ "Elvl", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of elvls", response = Elvl.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/elvls",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Elvl>> getAllElvls() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 101.9, \"isin\" : \"RU000A0JX0J2\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /elvls/{isin} : Get elvl by isin
     *
     * @param isin How many items to return at one time (max 100) (required)
     * @return Elvl by isin (status code 200)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Get elvl by isin", nickname = "getElvlByIsin", notes = "", response = Elvl.class, tags={ "Elvl", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Elvl by isin", response = Elvl.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/elvls/{isin}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Elvl> getElvlByIsin(@Pattern(regexp="\\b([A-Z]{2})((?![A-Z]{10}\\b)[A-Z0-9]{10})\\b") @Size(min=12,max=12) @ApiParam(value = "How many items to return at one time (max 100)",required=true) @PathVariable("isin") String isin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 101.9, \"isin\" : \"RU000A0JX0J2\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
